section
  h3(id='app.use') app.use([path], [function...], function)

  p Mount the <a href="#middleware.api">middleware</a> <code>function</code>(s) at the <code>path</code>. If <code>path</code> is not specified, it defaults to "/".

  p Mounting a middleware at a <code>path</code> will cause the middleware function to be executed whenever the base of the requested path matches the <code>path</code>.

  p Since <code>path</code> defaults to "/", middleware mounted without a path will be executed for every request to the app.

  +js.
    // this middleware will be executed for every request to the app
    app.use(function (req, res, next) {
      console.log('Time: %d', Date.now());
      next();
    })

  p Middleware functions are executed sequentially, therefore the order of middleware inclusion is important.

  +js.

    // this middleware will not allow the request to go beyond it
    app.use(function(req, res, next) {
      res.send('Hello World');
    })

    // requests will never reach this route
    app.get('/', function (req, res) {
      res.send('Welcome');
    })

  .notice The middleware examples below are intentionally left overly simple to keep the examples lean and clutter-free.

  p <code>path</code> can be a string representing a path, a path pattern, a regular expression to match paths, or an array of combinations of the aforementioned path objects.

    table.doctable(border='1')
      thead
        tr
          th Type
          th Example
      tbody
        tr
          td
            strong Path
          td
            +js.
              // will match paths starting with /abcd
              app.use('/abcd', function (req, res, next) {
                next();
              })
        tr
          td
            strong Path Pattern
          td
            +js.

              // will match paths starting with /abcd and /abd
              app.use('/abc?d', function (req, res, next) {
                next();
              })

              // will match paths starting with /abcd and /abd
              app.use('/abc?d', function (req, res, next) {
                next();
              })

              // will match paths starting with /abcd, /abbcd, /abbbbbcd and so on
              app.use('/ab+cd', function (req, res, next) {
                next();
              })

              // will match paths starting with /abcd, /abxcd, /abFOOcd, /abbArcd and so on  
              app.use('/ab*cd', function (req, res, next) {
                next();
              })

              // will match paths starting with /ad and /abcd
              app.use('/a(bc)?d', function (req, res, next) {
                next();
              })
        tr
          td
            strong Regular Expression
          td
            +js.
              // will match paths starting with /abc and /xyz
              app.use(/\/abc|\/xyz/, function (req, res, next) {
                next();
              })
        tr
          td
            strong Array
          td
            +js.
              // will match paths starting with /abcd, /xyza, /lmn, and /pqr
              app.use(['/abcd', '/xyza', /\/lmn|\/pqr/], function (req, res, next) {
                next();
              })

  p <code>function</code> can be a middleware function, a series of middleware functions, an array of middleware functions, or a combination of all of them. Since routers and apps implement the middleware interface, they can be used like any other middleware function.

  table.doctable(border='1')
    thead
      tr
        th Usage
        th Example
    tbody
      tr
        td
          strong Single Middleware
        td
          p A middleware function can be defined and mounted locally.
          +js.
            app.use(function (req, res, next) {
              next();
            })

          p A router is a valid middleware.

          +js.
            var router = express.Router();
            router.get('/', function (req, res, next) {
              next();
            })
            app.use(router);

          p An Express app is a valid middleware.
          +js.
            var subApp = express();
            subApp.get('/', function (req, res, next) {
              next();
            })
            app.use(subApp);

      tr
        td
          strong Series of Middleware
        td
          p More than one middleware can be specified at a mount path.
          +js.

            var r1 = express.Router();
            r1.get('/', function (req, res, next) {
              next();
            })

            var r2 = express.Router();
            r2.get('/', function (req, res, next) {
              next();
            })

            app.use(r1, r2);

      tr
        td
          strong Array
        td
          p Clubbing middleware in arrays is a good way to logically group them.
          +js.

            var r1 = express.Router();
            r1.get('/', function (req, res, next) {
              next();
            })

            var r2 = express.Router();
            r2.get('/', function (req, res, next) {
              next();
            })

            app.use([r1, r2]);

      tr
        td
          strong Combination
        td
          p All the above ways of mounting middleware can be combined.
          +js.

            function mw1(req, res, next) { next(); }
            function mw2(req, res, next) { next(); }

            var r1 = express.Router();
            r1.get('/', function (req, res, next) { next(); });

            var r2 = express.Router();
            r2.get('/', function (req, res, next) { next(); });

            var subApp = express();
            subApp.get('/', function (req, res, next) { next(); });

            app.use(mw1, [mw2, r1, r2], subApp);

  p Following are some examples of using the <a href="#express.static">express.static</a> middleware in an Express app.

  p Serve static content for the app from the "public" directory in the application directory.
  +js.
      // GET /style.css etc
      app.use(express.static(__dirname + '/public'));

  p Mount the middleware at "/static" to server static content only when their request path is prefixed with "/static".
  +js.
    // GET /static/style.css etc.
    app.use('/static', express.static(__dirname + '/public'));

  p Disable logging for static content requests by loading the logger middleware after the static middleware.
  +js.
      app.use(express.static(__dirname + '/public'));
      app.use(logger());

  p.
    Serve static files from multiple directories, but give precedence to "./public" over the others.
  +js.
    app.use(express.static(__dirname + '/public'));
    app.use(express.static(__dirname + '/files'));
    app.use(express.static(__dirname + '/uploads'));
